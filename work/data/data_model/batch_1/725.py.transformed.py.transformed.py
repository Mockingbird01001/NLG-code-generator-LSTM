
import numpy as np
class SubClass(np.ndarray): ...
f8: np.float64
A: np.ndarray
B: SubClass
reveal_type(f8.all())
reveal_type(A.all())
reveal_type(A.all(axis=0))
reveal_type(A.all(keepdims=True))
reveal_type(A.all(out=B))
reveal_type(f8.any())
reveal_type(A.any())
reveal_type(A.any(axis=0))
reveal_type(A.any(keepdims=True))
reveal_type(A.any(out=B))
reveal_type(f8.argmax())
reveal_type(A.argmax())
reveal_type(A.argmax(axis=0))
reveal_type(A.argmax(out=B))
reveal_type(f8.argmin())
reveal_type(A.argmin())
reveal_type(A.argmin(axis=0))
reveal_type(A.argmin(out=B))
reveal_type(f8.argsort())
reveal_type(A.argsort())
reveal_type(f8.astype(np.int64).choose([()]))
reveal_type(A.choose([0]))
reveal_type(A.choose([0], out=B))
reveal_type(f8.clip(1))
reveal_type(A.clip(1))
reveal_type(A.clip(None, 1))
reveal_type(A.clip(1, out=B))
reveal_type(A.clip(None, 1, out=B))
reveal_type(f8.compress([0]))
reveal_type(A.compress([0]))
reveal_type(A.compress([0], out=B))
reveal_type(f8.conj())
reveal_type(A.conj())
reveal_type(B.conj())
reveal_type(f8.conjugate())
reveal_type(A.conjugate())
reveal_type(B.conjugate())
reveal_type(f8.cumprod())
reveal_type(A.cumprod())
reveal_type(A.cumprod(out=B))
reveal_type(f8.cumsum())
reveal_type(A.cumsum())
reveal_type(A.cumsum(out=B))
reveal_type(f8.max())
reveal_type(A.max())
reveal_type(A.max(axis=0))
reveal_type(A.max(keepdims=True))
reveal_type(A.max(out=B))
reveal_type(f8.mean())
reveal_type(A.mean())
reveal_type(A.mean(axis=0))
reveal_type(A.mean(keepdims=True))
reveal_type(A.mean(out=B))
reveal_type(f8.min())
reveal_type(A.min())
reveal_type(A.min(axis=0))
reveal_type(A.min(keepdims=True))
reveal_type(A.min(out=B))
reveal_type(f8.newbyteorder())
reveal_type(A.newbyteorder())
reveal_type(B.newbyteorder('|'))
reveal_type(f8.prod())
reveal_type(A.prod())
reveal_type(A.prod(axis=0))
reveal_type(A.prod(keepdims=True))
reveal_type(A.prod(out=B))
reveal_type(f8.ptp())
reveal_type(A.ptp())
reveal_type(A.ptp(axis=0))
reveal_type(A.ptp(keepdims=True))
reveal_type(A.ptp(out=B))
reveal_type(f8.round())
reveal_type(A.round())
reveal_type(A.round(out=B))
reveal_type(f8.repeat(1))
reveal_type(A.repeat(1))
reveal_type(B.repeat(1))
reveal_type(f8.std())
reveal_type(A.std())
reveal_type(A.std(axis=0))
reveal_type(A.std(keepdims=True))
reveal_type(A.std(out=B))
reveal_type(f8.sum())
reveal_type(A.sum())
reveal_type(A.sum(axis=0))
reveal_type(A.sum(keepdims=True))
reveal_type(A.sum(out=B))
reveal_type(f8.take(0))
reveal_type(A.take(0))
reveal_type(A.take([0]))
reveal_type(A.take(0, out=B))
reveal_type(A.take([0], out=B))
reveal_type(f8.var())
reveal_type(A.var())
reveal_type(A.var(axis=0))
reveal_type(A.var(keepdims=True))
reveal_type(A.var(out=B))
reveal_type(A.argpartition([0]))
reveal_type(A.diagonal())
reveal_type(A.dot(1))
reveal_type(A.dot(1, out=B))
reveal_type(A.nonzero())
reveal_type(A.searchsorted([1]))
reveal_type(A.trace())
reveal_type(A.trace(out=B))
